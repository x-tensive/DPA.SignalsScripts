using DPA.Adapter.Contracts;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Linq;
using System.Reactive.Linq;
using System.Threading.Tasks;
using Xtensive.DPA.EventManager;
using Xtensive.Orm;
using Xtensive.Project109.Host.Base;

namespace Xtensive.Project109.Host.DPA
{
public class ZFTrigger2 : Signals2TriggerBase
{
private readonly IHostLog<ZFTrigger2> logger;
private IEventSource generalEventSource;
private IDisposable sub;
private long equipmentId;

 public ZFTrigger2(IServiceProvider serviceProvider)
{
generalEventSource = serviceProvider.GetRequiredService<IEventSource>();
logger = serviceProvider.GetRequiredService<IHostLog<ZFTrigger2>>();
}
public override Task StartAsync()
{
equipmentId = Query.All<Equipment>().Where(x => x.Name == "LR018").Select(x => x.Id).First();
sub = generalEventSource
.EventsOf<ObjectChanged<SharedEventInfo>>()
.WithEventId(Guid.Parse("fef321ed-6a5e-4538-afb8-711bfee7351e"))
.Where(x => x.OldValue.GetFieldValue("VALIDATIE") != x.NewValue.GetFieldValue("VALIDATIE") && x.NewValue.GetFieldValue("VALIDATIE").ToString() == "1")
.Subscribe(HandleIndicatorEvent);

 logger.Info("Subscription for equipment " + equipmentId + " started");
return Task.CompletedTask;
}

 private void HandleIndicatorEvent(ObjectChanged<SharedEventInfo> obj)
{
logger.Info(String.Join(", ", obj.NewValue.GetFields()));
logger.Info("trigger fired " + obj.NewValue.EventIdentifier + " - " + obj.NewValue.GetFieldValue("VALIDATIE"));
OnSignal(Tuple.Create(equipmentId, 1));
}

 public override Task StopAsync()
{
sub.Dispose();
return Task.CompletedTask;
}
}
}